/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include "includes/bsonarrayobj.h"
#include "includes/bson.h"
#include "includes/bsonobj.h"
#include "includes/bsonparser.h"
#include "includes/filterdefs.h"
#include "includes/bsonutil.h"
#include "includes/util.h"
#include "includes/djondbconnection.h"
#include "includes/djondbcursor.h"
#include "includes/djondbconnectionmanager.h"
#include "includes/djondb_client.h"

SWIGINTERN std::vector< BSONObj * >::const_reference std_vector_Sl_BSONObj_Sm__Sg__get(std::vector< BSONObj * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_BSONObj_Sm__Sg__set(std::vector< BSONObj * > *self,int i,std::vector< BSONObj * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONObjVectorPtr_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< BSONObj * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< BSONObj * > *)new std::vector< BSONObj * >();
  *(std::vector< BSONObj * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONObjVectorPtr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< BSONObj * >::size_type arg1 ;
  std::vector< BSONObj * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< BSONObj * >::size_type)jarg1; 
  result = (std::vector< BSONObj * > *)new std::vector< BSONObj * >(arg1);
  *(std::vector< BSONObj * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObjVectorPtr_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  result = ((std::vector< BSONObj * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObjVectorPtr_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  result = ((std::vector< BSONObj * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObjVectorPtr_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  arg2 = (std::vector< BSONObj * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_BSONObjVectorPtr_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  result = (bool)((std::vector< BSONObj * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObjVectorPtr_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObjVectorPtr_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  std::vector< BSONObj * >::value_type *arg2 = 0 ;
  std::vector< BSONObj * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  temp2 = *(std::vector< BSONObj * >::value_type *)&jarg2;
  arg2 = (std::vector< BSONObj * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< BSONObj * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObjVectorPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  std::vector< BSONObj * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< BSONObj * >::value_type *) &std_vector_Sl_BSONObj_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< BSONObj * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObjVectorPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  int arg2 ;
  std::vector< BSONObj * >::value_type *arg3 = 0 ;
  std::vector< BSONObj * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< BSONObj * >::value_type *)&jarg3;
  arg3 = (std::vector< BSONObj * >::value_type *)&temp3; 
  try {
    std_vector_Sl_BSONObj_Sm__Sg__set(arg1,arg2,(BSONObj *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1BSONObjVectorPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< BSONObj * > *arg1 = (std::vector< BSONObj * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< BSONObj * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONArrayObj_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BSONArrayObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BSONArrayObj *)new BSONArrayObj();
  *(BSONArrayObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1BSONArrayObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BSONArrayObj **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONArrayObj_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BSONArrayObj *arg1 = 0 ;
  BSONArrayObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONArrayObj **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONArrayObj const & reference is null");
    return 0;
  } 
  result = (BSONArrayObj *)new BSONArrayObj((BSONArrayObj const &)*arg1);
  *(BSONArrayObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_BSONArrayObj_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  __int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONArrayObj **)&jarg1; 
  result = ((BSONArrayObj const *)arg1)->length();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONArrayObj_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  BSONObj *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BSONArrayObj **)&jarg1; 
  arg2 = *(BSONObj **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return ;
  } 
  (arg1)->add((BSONObj const &)*arg2);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONArrayObj_1addAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  BSONArrayObj *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BSONArrayObj **)&jarg1; 
  arg2 = *(BSONArrayObj **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONArrayObj const & reference is null");
    return ;
  } 
  (arg1)->addAll((BSONArrayObj const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONArrayObj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  __int32 arg2 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONArrayObj **)&jarg1; 
  arg2 = (__int32)jarg2; 
  result = (BSONObj *)((BSONArrayObj const *)arg1)->get(arg2);
  *(BSONObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_BSONArrayObj_1toChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONArrayObj **)&jarg1; 
  result = (char *)((BSONArrayObj const *)arg1)->toChar();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONArrayObj_1select(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  char *arg2 = (char *) 0 ;
  BSONArrayObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONArrayObj **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (BSONArrayObj *)((BSONArrayObj const *)arg1)->select((char const *)arg2);
  *(BSONArrayObj **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONArrayObj_1begin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  SwigValueWrapper< std::vector< BSONObj * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONArrayObj **)&jarg1; 
  result = (arg1)->begin();
  *(BSONArrayObj::iterator **)&jresult = new BSONArrayObj::iterator((const BSONArrayObj::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONArrayObj_1end_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BSONArrayObj *arg1 = (BSONArrayObj *) 0 ;
  SwigValueWrapper< std::vector< BSONObj * >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONArrayObj **)&jarg1; 
  result = (arg1)->end();
  *(BSONArrayObj::iterator **)&jresult = new BSONArrayObj::iterator((const BSONArrayObj::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONObj_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BSONObj *)new BSONObj();
  *(BSONObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONObj_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BSONObj *arg1 = 0 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return 0;
  } 
  result = (BSONObj *)new BSONObj((BSONObj const &)*arg1);
  *(BSONObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1BSONObj(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BSONObj **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (__int32)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int64 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (__int64)jarg3; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->add(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  __int32 arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (__int32)jarg4; 
  (arg1)->add(arg2,(char const *)arg3,arg4);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONObj *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(BSONObj **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return ;
  } 
  (arg1)->add(arg2,(BSONObj const &)*arg3);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONArrayObj *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(BSONArrayObj **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONArrayObj const & reference is null");
    return ;
  } 
  (arg1)->add(arg2,(BSONArrayObj const &)*arg3);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(BSONContent **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONContent const & reference is null");
    return ;
  } 
  (arg1)->add(arg2,(BSONContent const &)*arg3);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1add_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->add(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_BSONObj_1has(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((BSONObj const *)arg1)->has(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (bool)((BSONObj const *)arg1)->getBoolean(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((BSONObj const *)arg1)->getInt(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (double)((BSONObj const *)arg1)->getDouble(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  __int64 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((BSONObj const *)arg1)->getLong(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = ((BSONObj const *)arg1)->getString(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getBSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (BSONObj *)((BSONObj const *)arg1)->getBSON(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  *(BSONObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getBSONArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONArrayObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (BSONArrayObj *)((BSONObj const *)arg1)->getBSONArray(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  *(BSONArrayObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (BSONContent *)((BSONObj const *)arg1)->get(arg2);
  }
  catch(BSONException &_e) {
    (void)_e;
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, "C++ BSONException exception thrown");
    return 0; 
  }
  
  *(BSONContent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getContent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONContent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (BSONContent *)((BSONObj const *)arg1)->getContent(arg2);
  *(BSONContent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getContent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONTYPE arg3 ;
  BSONTYPE *argp3 ;
  BSONContent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(BSONTYPE **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BSONTYPE");
    return 0;
  }
  arg3 = *argp3; 
  result = (BSONContent *)((BSONObj const *)arg1)->getContent(arg2,arg3);
  *(BSONContent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1getXpath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string *arg2 = 0 ;
  BSONContent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (BSONContent *)((BSONObj const *)arg1)->getXpath((std::string const &)*arg2);
  *(BSONContent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1select_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  char *arg2 = (char *) 0 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (BSONObj *)((BSONObj const *)arg1)->select((char const *)arg2);
  *(BSONObj **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1select_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (BSONObj *)((BSONObj const *)arg1)->select((char const *)arg2,arg3);
  *(BSONObj **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  BSONTYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((BSONObj const *)arg1)->type(arg2);
  *(BSONTYPE **)&jresult = new BSONTYPE((const BSONTYPE &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_BSONObj_1toChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  result = (char *)(arg1)->toChar();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  BSONObj::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  result = ((BSONObj const *)arg1)->begin();
  *(BSONObj::const_iterator **)&jresult = new BSONObj::const_iterator((const BSONObj::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONObj_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  BSONObj::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  result = ((BSONObj const *)arg1)->end();
  *(BSONObj::const_iterator **)&jresult = new BSONObj::const_iterator((const BSONObj::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_BSONObj_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  __int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  result = ((BSONObj const *)arg1)->length();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_BSONObj_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  BSONObj *arg1 = (BSONObj *) 0 ;
  BSONObj *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BSONObj **)&jarg1; 
  arg2 = *(BSONObj **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return 0;
  } 
  result = (int)((BSONObj const *)arg1)->compare((BSONObj const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_BSONObj_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  BSONObj *arg1 = (BSONObj *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONObj **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->remove(arg2);
    } catch (DjondbException &e) {
      jclass clazz = jenv->FindClass("djondb/DjondbException");
      jenv->ThrowNew(clazz, e.what());
    }
  }
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONParseException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  BSONParseException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (BSONParseException *)new BSONParseException(arg1,(char const *)arg2);
  *(BSONParseException **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONParseException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BSONParseException *arg1 = 0 ;
  BSONParseException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONParseException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONParseException const & reference is null");
    return 0;
  } 
  result = (BSONParseException *)new BSONParseException((BSONParseException const &)*arg1);
  *(BSONParseException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_BSONParseException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BSONParseException *arg1 = (BSONParseException *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONParseException **)&jarg1; 
  result = (char *)((BSONParseException const *)arg1)->what();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_BSONParseException_1errorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BSONParseException *arg1 = (BSONParseException *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BSONParseException **)&jarg1; 
  result = (int)((BSONParseException const *)arg1)->errorCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1BSONParseException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BSONParseException *arg1 = (BSONParseException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BSONParseException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1BSONParser(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BSONParser *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BSONParser *)new BSONParser();
  *(BSONParser **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1BSONParser(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BSONParser *arg1 = (BSONParser *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BSONParser **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONParser_1parse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (BSONObj *)BSONParser::parse((std::string const &)*arg1);
    } catch (BSONParseException &e) {
      jclass clazz = jenv->FindClass("djondb/ParseException");
      jmethodID methodID = jenv->GetMethodID(clazz, "<init>", "(ILjava/lang/String;)V");
      const char* data = e.what();
      jstring s = (*jenv).NewStringUTF(data);
      jint i = e.errorCode();
      jthrowable p = (jthrowable)jenv->NewObject(clazz, methodID, i, s);
      jenv->Throw(p);
      return 0;
    }
  }
  *(BSONObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_BSONParser_1parseArray(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BSONArrayObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (BSONArrayObj *)BSONParser::parseArray((std::string const &)*arg1);
  *(BSONArrayObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_parseFilterOperator(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  FILTER_OPERATORS result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (FILTER_OPERATORS)parseFilterOperator((char const *)arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1ParseException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  ParseException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (ParseException *)new ParseException(arg1,(char const *)arg2);
  *(ParseException **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1ParseException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ParseException *arg1 = 0 ;
  ParseException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParseException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ParseException const & reference is null");
    return 0;
  } 
  result = (ParseException *)new ParseException((ParseException const &)*arg1);
  *(ParseException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_ParseException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ParseException *arg1 = (ParseException *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParseException **)&jarg1; 
  result = (char *)((ParseException const *)arg1)->what();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_ParseException_1errorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ParseException *arg1 = (ParseException *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ParseException **)&jarg1; 
  result = (int)((ParseException const *)arg1)->errorCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1ParseException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ParseException *arg1 = (ParseException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ParseException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_bson_1splitSelect(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = bson_splitSelect((char const *)arg1);
  *(std::set< std::string > **)&jresult = new std::set< std::string >((const std::set< std::string > &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_bson_1subselect(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)bson_subselect((char const *)arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_convert(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  BSONTYPE arg1 ;
  BSONTYPE arg2 ;
  void *arg3 = (void *) 0 ;
  BSONTYPE *argp1 ;
  BSONTYPE *argp2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(BSONTYPE **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BSONTYPE");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(BSONTYPE **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BSONTYPE");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(void **)&jarg3; 
  result = (void *)convert(arg1,arg2,arg3);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1DjondbException_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  DjondbException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (DjondbException *)new DjondbException(arg1,(char const *)arg2);
  *(DjondbException **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1DjondbException_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DjondbException *arg1 = 0 ;
  DjondbException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DjondbException **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DjondbException const & reference is null");
    return 0;
  } 
  result = (DjondbException *)new DjondbException((DjondbException const &)*arg1);
  *(DjondbException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_DjondbException_1what(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  DjondbException *arg1 = (DjondbException *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DjondbException **)&jarg1; 
  result = (char *)((DjondbException const *)arg1)->what();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_DjondbException_1errorCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DjondbException *arg1 = (DjondbException *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DjondbException **)&jarg1; 
  result = (int)((DjondbException const *)arg1)->errorCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1DjondbException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DjondbException *arg1 = (DjondbException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DjondbException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_SERVER_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1243);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1DjondbConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  djondb::DjondbConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection((char const *)arg1);
  *(djondb::DjondbConnection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1DjondbConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  djondb::DjondbConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection((char const *)arg1,arg2);
  *(djondb::DjondbConnection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1DjondbConnection_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = 0 ;
  djondb::DjondbConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "djondb::DjondbConnection const & reference is null");
    return 0;
  } 
  result = (djondb::DjondbConnection *)new djondb::DjondbConnection((djondb::DjondbConnection const &)*arg1);
  *(djondb::DjondbConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1DjondbConnection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1beginTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  result = (char *)(arg1)->beginTransaction();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1commitTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  (arg1)->commitTransaction();
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1rollbackTransaction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  (arg1)->rollbackTransaction();
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  result = (bool)(arg1)->open();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1internalClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  (arg1)->internalClose();
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  result = (bool)((djondb::DjondbConnection const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  result = (bool)((djondb::DjondbConnection const *)arg1)->shutdown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (bool)(arg1)->insert((char const *)arg2,(char const *)arg3,(char const *)arg4);
    } catch (DjondbException &e) {
      jclass clazz = jenv->FindClass("djondb/DjondbException");
      jenv->ThrowNew(clazz, e.what());
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  BSONObj *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(BSONObj **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->insert((char const *)arg2,(char const *)arg3,(BSONObj const &)*arg4);
    } catch (DjondbException &e) {
      jclass clazz = jenv->FindClass("djondb/DjondbException");
      jenv->ThrowNew(clazz, e.what());
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1findByKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (BSONObj *)(arg1)->findByKey((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  *(BSONObj **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1findByKey_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (BSONObj *)(arg1)->findByKey((char const *)arg2,(char const *)arg3,(char const *)arg4);
  *(BSONObj **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (djondb::DjondbCursor *)(arg1)->find((char const *)arg2,(char const *)arg3);
  *(djondb::DjondbCursor **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  BSONObj *arg4 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(BSONObj **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return 0;
  } 
  result = (djondb::DjondbCursor *)(arg1)->find((char const *)arg2,(char const *)arg3,(BSONObj const &)*arg4);
  *(djondb::DjondbCursor **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (djondb::DjondbCursor *)(arg1)->find((char const *)arg2,(char const *)arg3,(char const *)arg4);
  *(djondb::DjondbCursor **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1find_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  BSONObj *arg5 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(BSONObj **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return 0;
  } 
  result = (djondb::DjondbCursor *)(arg1)->find((char const *)arg2,(char const *)arg3,(char const *)arg4,(BSONObj const &)*arg5);
  *(djondb::DjondbCursor **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1find_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (djondb::DjondbCursor *)(arg1)->find((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  *(djondb::DjondbCursor **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1find_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  BSONObj *arg6 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = *(BSONObj **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return 0;
  } 
  result = (djondb::DjondbCursor *)(arg1)->find((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(BSONObj const &)*arg6);
  *(djondb::DjondbCursor **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1update_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  {
    try {
      result = (bool)(arg1)->update((char const *)arg2,(char const *)arg3,(char const *)arg4);
    } catch (DjondbException &e) {
      jclass clazz = jenv->FindClass("djondb/DjondbException");
      jenv->ThrowNew(clazz, e.what());
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1update_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  BSONObj *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(BSONObj **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->update((char const *)arg2,(char const *)arg3,(BSONObj const &)*arg4);
    } catch (DjondbException &e) {
      jclass clazz = jenv->FindClass("djondb/DjondbException");
      jenv->ThrowNew(clazz, e.what());
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  {
    try {
      result = (bool)(arg1)->remove((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
    } catch (DjondbException &e) {
      jclass clazz = jenv->FindClass("djondb/DjondbException");
      jenv->ThrowNew(clazz, e.what());
    }
  }
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1executeQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (djondb::DjondbCursor *)(arg1)->executeQuery((char const *)arg2);
  *(djondb::DjondbCursor **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1executeUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->executeUpdate((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1releaseCursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  djondb::DjondbCursor *arg2 = (djondb::DjondbCursor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = *(djondb::DjondbCursor **)&jarg2; 
  (arg1)->releaseCursor(arg2);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1createIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  BSONObj *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = *(BSONObj **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return ;
  } 
  (arg1)->createIndex((BSONObj const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1dropNamespace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (bool)(arg1)->dropNamespace((char const *)arg2,(char const *)arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1dbs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  result = (std::vector< std::string > *)((djondb::DjondbConnection const *)arg1)->dbs();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1namespaces(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (std::vector< std::string > *)((djondb::DjondbConnection const *)arg1)->namespaces((char const *)arg2);
  *(std::vector< std::string > **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1host(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  result = (char *)((djondb::DjondbConnection const *)arg1)->host();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1backup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)((djondb::DjondbConnection const *)arg1)->backup((char const *)arg2,(char const *)arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_DjondbConnection_1backup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  BSONObj *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = *(BSONObj **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BSONObj const & reference is null");
    return 0;
  } 
  result = (int)((djondb::DjondbConnection const *)arg1)->backup((char const *)arg2,(char const *)arg3,(BSONObj const &)*arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1DjondbCursor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  NetworkOutputStream *arg1 = (NetworkOutputStream *) 0 ;
  NetworkInputStream *arg2 = (NetworkInputStream *) 0 ;
  CommandWriter *arg3 = (CommandWriter *) 0 ;
  char *arg4 = (char *) 0 ;
  BSONArrayObj *arg5 = (BSONArrayObj *) 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = *(NetworkOutputStream **)&jarg1; 
  arg2 = *(NetworkInputStream **)&jarg2; 
  arg3 = *(CommandWriter **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = *(BSONArrayObj **)&jarg5; 
  result = (djondb::DjondbCursor *)new djondb::DjondbCursor(arg1,arg2,arg3,(char const *)arg4,arg5);
  *(djondb::DjondbCursor **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1DjondbCursor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  djondb::DjondbCursor *arg1 = 0 ;
  djondb::DjondbCursor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbCursor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "djondb::DjondbCursor const & reference is null");
    return 0;
  } 
  result = (djondb::DjondbCursor *)new djondb::DjondbCursor((djondb::DjondbCursor const &)*arg1);
  *(djondb::DjondbCursor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1DjondbCursor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(djondb::DjondbCursor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbCursor_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbCursor **)&jarg1; 
  result = (bool)(arg1)->next();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_djondb_djonwrapperJNI_DjondbCursor_1previous(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbCursor **)&jarg1; 
  result = (bool)(arg1)->previous();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbCursor_1current(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  BSONObj *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbCursor **)&jarg1; 
  result = (BSONObj *)(arg1)->current();
  *(BSONObj **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_DjondbCursor_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  __int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbCursor **)&jarg1; 
  result = (arg1)->length();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbCursor_1releaseCursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbCursor **)&jarg1; 
  (arg1)->releaseCursor();
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbCursor_1seek(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  djondb::DjondbCursor *arg1 = (djondb::DjondbCursor *) 0 ;
  __int32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbCursor **)&jarg1; 
  arg2 = (__int32)jarg2; 
  (arg1)->seek(arg2);
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_ConnectionReference_1_1connection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  djondb::DjondbConnection *arg2 = (djondb::DjondbConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(djondb::ConnectionReference **)&jarg1; 
  arg2 = *(djondb::DjondbConnection **)&jarg2; 
  if (arg1) (arg1)->_connection = arg2;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_ConnectionReference_1_1connection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  djondb::DjondbConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::ConnectionReference **)&jarg1; 
  result = (djondb::DjondbConnection *) ((arg1)->_connection);
  *(djondb::DjondbConnection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_ConnectionReference_1_1references_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::ConnectionReference **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_references = arg2;
}


SWIGEXPORT jint JNICALL Java_djondb_djonwrapperJNI_ConnectionReference_1_1references_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::ConnectionReference **)&jarg1; 
  result = (int) ((arg1)->_references);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1ConnectionReference(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  djondb::ConnectionReference *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (djondb::ConnectionReference *)new djondb::ConnectionReference();
  *(djondb::ConnectionReference **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1ConnectionReference(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  djondb::ConnectionReference *arg1 = (djondb::ConnectionReference *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(djondb::ConnectionReference **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_new_1DjondbConnectionManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  djondb::DjondbConnectionManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (djondb::DjondbConnectionManager *)new djondb::DjondbConnectionManager();
  *(djondb::DjondbConnectionManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_delete_1DjondbConnectionManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  djondb::DjondbConnectionManager *arg1 = (djondb::DjondbConnectionManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(djondb::DjondbConnectionManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnectionManager_1getConnection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  djondb::DjondbConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (djondb::DjondbConnection *)djondb::DjondbConnectionManager::getConnection((char const *)arg1);
  *(djondb::DjondbConnection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_djondb_djonwrapperJNI_DjondbConnectionManager_1getConnection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  djondb::DjondbConnection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = (djondb::DjondbConnection *)djondb::DjondbConnectionManager::getConnection((char const *)arg1,arg2);
  *(djondb::DjondbConnection **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_djondb_djonwrapperJNI_DjondbConnectionManager_1releaseConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  djondb::DjondbConnection *arg1 = (djondb::DjondbConnection *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(djondb::DjondbConnection **)&jarg1; 
  djondb::DjondbConnectionManager::releaseConnection(arg1);
}


#ifdef __cplusplus
}
#endif

