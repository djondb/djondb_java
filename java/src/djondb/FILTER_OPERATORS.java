/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package djondb;

public final class FILTER_OPERATORS {
  public final static FILTER_OPERATORS FO_NONE = new FILTER_OPERATORS("FO_NONE");
  public final static FILTER_OPERATORS FO_TOKEN = new FILTER_OPERATORS("FO_TOKEN");
  public final static FILTER_OPERATORS FO_AND = new FILTER_OPERATORS("FO_AND");
  public final static FILTER_OPERATORS FO_OR = new FILTER_OPERATORS("FO_OR");
  public final static FILTER_OPERATORS FO_EQUALS = new FILTER_OPERATORS("FO_EQUALS");
  public final static FILTER_OPERATORS FO_NOT_EQUALS = new FILTER_OPERATORS("FO_NOT_EQUALS");
  public final static FILTER_OPERATORS FO_PARENTESIS_OPEN = new FILTER_OPERATORS("FO_PARENTESIS_OPEN");
  public final static FILTER_OPERATORS FO_PARENTESIS_CLOSE = new FILTER_OPERATORS("FO_PARENTESIS_CLOSE");
  public final static FILTER_OPERATORS FO_NOT = new FILTER_OPERATORS("FO_NOT");
  public final static FILTER_OPERATORS FO_LESSTHAN = new FILTER_OPERATORS("FO_LESSTHAN");
  public final static FILTER_OPERATORS FO_LESSEQUALTHAN = new FILTER_OPERATORS("FO_LESSEQUALTHAN");
  public final static FILTER_OPERATORS FO_GREATERTHAN = new FILTER_OPERATORS("FO_GREATERTHAN");
  public final static FILTER_OPERATORS FO_GREATEREQUALTHAN = new FILTER_OPERATORS("FO_GREATEREQUALTHAN");
  public final static FILTER_OPERATORS FO_EXISTS = new FILTER_OPERATORS("FO_EXISTS");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static FILTER_OPERATORS swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + FILTER_OPERATORS.class + " with value " + swigValue);
  }

  private FILTER_OPERATORS(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private FILTER_OPERATORS(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private FILTER_OPERATORS(String swigName, FILTER_OPERATORS swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static FILTER_OPERATORS[] swigValues = { FO_NONE, FO_TOKEN, FO_AND, FO_OR, FO_EQUALS, FO_NOT_EQUALS, FO_PARENTESIS_OPEN, FO_PARENTESIS_CLOSE, FO_NOT, FO_LESSTHAN, FO_LESSEQUALTHAN, FO_GREATERTHAN, FO_GREATEREQUALTHAN, FO_EXISTS };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

